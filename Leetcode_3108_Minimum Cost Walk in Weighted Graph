3108. Minimum Cost Walk in Weighted Graph

    def minimumCost(self, n: int, edges: List[List[int]], query: List[List[int]]) -> List[int]:
        
        def find(x, parent):
            while parent[x] != x:
                x = parent[x]
            return x
        
        parent = list(range(n))
        size = [1]*n
        bitwise = [-1]*n

        for u, v, w in edges:
            p1 = find(u, parent)
            p2 = find(v, parent)
            if p1 == p2:
                bitwise[p1] &= w
            else:
                if bitwise[p1] == -1 and bitwise[p2] == -1:
                    bv = w
                elif bitwise[p1] == -1:
                    bv = w & bitwise[p2]
                elif bitwise[p2] == -1:
                    bv = w & bitwise[p1]
                else:
                    bv = w & bitwise[p1] & bitwise[p2]
                
                if size[p1] >= size[p2]:
                    parent[p2] = p1
                    size[p1] += size[p2]
                    bitwise[p1] = bv
                else:
                    parent[p1]  = p2
                    size[p2] += size[p1]
                    bitwise[p2] = bv
        
        res = []
        for start, target in query:
            ps = find(start, parent)
            pt = find(target, parent)

            if start == target:
                res.append(0)
            elif ps == pt:
                res.append(bitwise[ps])
            else:
                res.append(-1)
        
        return res
